setkey(world_cultural_factors, Code3)
review_iso_g = review_iso_g[world_cultural_factors, nomatch=0]
library(ggplot2)
names(review_iso_g)
ggplot(review_iso_g, aes(x=english_ratio, y=individualism, label=Code3)) + geom_label()
ggplot(review_iso_g, aes(x=english_ratio, y=power_distance, label=Code3)) + geom_label()
ggplot(review_iso_g, aes(x=english_ratio, y=GDP_per_capita_in_dollars, label=Code3)) + geom_label()
View(review_iso_g)
View(review_iso)
rm(list=setdiff(ls(), c("review_iso_g", "review_iso")))
review_iso_g_en = review_iso_g[english_ratio>0.6]
countries = unique(review_iso_g_en$Code3)
review_iso_english = review_iso[Code3 %in% countries]
countries = review_iso_g
View(countries)
rm(list=setdiff(ls(), c("countries", "review_iso")))
countries_en = countries[english_ratio>0.6]
review_iso_english = review_iso[Code3 %in% countries]
review_iso_english = review_iso[Code3 %in% countries_en$Code3]
review_iso_english = review_iso[Code3 %in% countries_en$Code3 & isEnglish==1]
library(quanteda)
mfdict <- dictionary(file = "LIWC2007_English080730.dic", format = "LIWC")
doc_term_matrix <- dfm(review_iso_english$comments, stem = FALSE, dictionary = mfdict)
doc_term = data.table( data.frame(doc_term_matrix) )
detach(package:quanteda)
View(doc_term)
review_iso_english = cbind(review_iso_english, doc_term)
remove(doc_term)
View(review_iso_english)
library(qdap)
install.packages("qdap")
str1 <- "How many words are in this sentence"
wc(str1)
library(qdap)
str1 <- "How many words are in this sentence"
wc(str1)
length(unlist(strsplit(str1," ")))
str1 <- "How many words are  in this sentence"
length(unlist(strsplit(str1," ")))
str1 <- "How many words are. in this sentence"
length(unlist(strsplit(str1," ")))
str1 <- "How many words are.in this sentence"
length(unlist(strsplit(str1," ")))
str_count(str1, '\\w+')
library(stringr)
str_count(str1, '\\w+')
str1 <- "How many words are in this sentence"
length(unlist(strsplit(str1," ")))
str_count(str1, '\\w+')
str1 <- "How many words are  in this sentence"
length(unlist(strsplit(str1," ")))
str_count(str1, '\\w+')
review_iso_english$nwords = str_count(review_iso_english$comments, '\\w+')
View(review_iso_english)
review_iso_english$comments[1]
review_iso_english$nwords[1]
review_iso_english$m_length = review_iso_english$nwords
review_iso_english$m_neg = review_iso_english$negemo/review_iso_english$nwords
review_iso_english$m_pos = review_iso_english$posemo/review_iso_english$nwords
review_iso_english$m_house = review_iso_english$home / review_iso_english$nwords
review_iso_english$m_social = review_iso_english$social / review_iso_english$nwords
names(review_iso_english)
review_iso_english$self = (review_iso_english$i+review_iso_english$ipron) / review_iso_english$nwords
review_iso_english$m_altruistic = (review_iso_english$we+review_iso_english$you+review_iso_english$shehe+review_iso_english$they) / review_iso_english$nwords
review_iso_english$m_money = review_iso_english$money / review_iso_english$nwords
review_iso_english$m_length = review_iso_english$nwords
review_iso_english$m_neg = review_iso_english$negemo / review_iso_english$nwords
review_iso_english$m_pos = review_iso_english$posemo / review_iso_english$nwords
review_iso_english$m_house = review_iso_english$home / review_iso_english$nwords
review_iso_english$m_social = review_iso_english$social / review_iso_english$nwords
review_iso_english$m_self = (review_iso_english$i+review_iso_english$ipron) / review_iso_english$nwords
review_iso_english$m_altruistic = (review_iso_english$we+review_iso_english$you+review_iso_english$shehe+review_iso_english$they) / review_iso_english$nwords
review_iso_english$m_location = review_iso_english$space / review_iso_english$nwords
review_iso_english$m_money = review_iso_english$money / review_iso_english$nwords
metrics_by_contry = review_iso_english[, .(n=length(idReview),
m_length = median(m_length),
m_neg=median(m_neg),
m_pos=median(m_pos),
m_house=median(m_house),
m_social=median(m_social),
m_self=median(m_self),
m_altruistic=median(m_altruistic),
m_location=median(m_location),
m_money=median(m_money)), by=Code3]
summary(review_iso_english)
detach(package:quanteda)
detach(package:stringr)
summary(review_iso_english)
detach(package"texcat")
detach(package:textcat)
summary(review_iso_english)
summary(review_iso_english$m_length)
summary(review_iso_english$m_neg)
summary(review_iso_english$m_pos)
summary(review_iso_english$m_house)
metrics_by_contry = review_iso_english[, .(m_length = median(m_length),
m_neg=median(m_neg),
m_pos=median(m_pos),
m_house=median(m_house),
m_social=median(m_social),
m_self=median(m_self),
m_altruistic=median(m_altruistic),
m_location=median(m_location),
m_money=median(m_money)), by=Code3]
metrics_by_contry = review_iso_english[, .(m_length = mean(m_length),
m_neg=mean(m_neg),
m_pos=mean(m_pos),
m_house=mean(m_house),
m_social=mean(m_social),
m_self=mean(m_self),
m_altruistic=mean(m_altruistic),
m_location=mean(m_location),
m_money=mean(m_money)), by=Code3]
metrics_by_contry = review_iso_english[, .(n=length(id),
m_length = mean(m_length),
m_neg=mean(m_neg),
m_pos=mean(m_pos),
m_house=mean(m_house),
m_social=mean(m_social),
m_self=mean(m_self),
m_altruistic=mean(m_altruistic),
m_location=mean(m_location),
m_money=mean(m_money)), by=Code3]
View(metrics_by_contry)
summary( review_iso_english$m_length )
hist( review_iso_english$m_length )
hist( log (review_iso_english$m_length ))
hist( log (review_iso_english$m_neg ))
hist( (review_iso_english$m_neg ))
summary(review_iso_english$m_neg)
hist( (review_iso_english$m_neg^.5 ))
hist( (review_iso_english$m_neg^.125 ))
metrics_by_contry = review_iso_english[, .(n=length(id),
m_length = mean(m_length),
m_neg=mean(m_neg),
m_pos=mean(m_pos),
m_house=mean(m_house),
m_social=mean(m_social),
m_self=mean(m_self),
m_altruistic=mean(m_altruistic),
m_location=mean(m_location),
m_money=mean(m_money)), by=Code3]
setkey(countries, Code3)
setkey(metrics_by_contry, Code3)
metrics_by_contry = metrics_by_contry[countries, nomatch=0]
View(metrics_by_contry)
names(metrics_by_contry)
varx = c("m_length", "m_neg", "m_pos", "m_house", "m_social", "m_self", "m_altruistic",
"m_location", "m_money")
varx = c("m_length", "m_neg", "m_pos", "m_house", "m_social", "m_self", "m_altruistic",
"m_location", "m_money")
vary = c("power_distance", "individualism", "overall_pace_means", "GDP_per_capita_in_dollars")
library(psych)
corr.test(metrics_by_contry[, varx, with=F], metrics_by_contry[, vary, with=F])
library(psych)
corr.test(metrics_by_contry[, varx, with=F], metrics_by_contry[, vary, with=F])
metrics_by_contry[, vary, with=F]
typeof(metrics_by_contry$power_distance)
typeof(metrics_by_contry$individualism)
typeof(metrics_by_contry$overall_pace_means)
typeof(metrics_by_contry$GDP_per_capita_in_dollars)
metrics_by_contry$overall_pace_means = as.numeric(metrics_by_contry$overall_pace_means)
corr.test(metrics_by_contry[, varx, with=F], metrics_by_contry[, vary, with=F])
corr.test(metrics_by_contry[, varx, with=F], metrics_by_contry[, vary, with=F], method="pearson", adjust="fdr")
summary(review_iso_english$m_neg)
hist( (review_iso_english$m_length ))
hist( (review_iso_english$m_neg ))
hist( (review_iso_english$m_pos ))
hist( (review_iso_english$m_house ))
hist( (review_iso_english$m_social ))
hist( (review_iso_english$m_self ))
hist( (review_iso_english$m_altruistic ))
hist( (review_iso_english$m_location ))
hist( (review_iso_english$m_money ))
x=c(0,0,0,0.1,2,3,4)
y = setdiff(x, 0)
y
miny = min(y)
miny
x_tranf = log10(x+miny)
x_tranf
review_iso_english$ml_length = log_plus_c(review_iso_english$m_length)
review_iso_english$ml_neg = log_plus_c(review_iso_english$m_neg)
review_iso_english$ml_pos = log_plus_c(review_iso_english$m_pos)
log_plus_c = function(x)
{
y = setdiff(x, 0)
miny = min(y)
x_tranf = log10(x+miny)
return(x_tranf)
}
review_iso_english$ml_length = log_plus_c(review_iso_english$m_length)
review_iso_english$ml_neg = log_plus_c(review_iso_english$m_neg)
review_iso_english$ml_pos = log_plus_c(review_iso_english$m_pos)
review_iso_english$ml_house = log_plus_c(review_iso_english$m_house)
review_iso_english$ml_social = log_plus_c(review_iso_english$m_social)
review_iso_english$ml_self = log_plus_c(review_iso_english$m_self)
review_iso_english$ml_altruistic = log_plus_c(review_iso_english$m_altruistic)
review_iso_english$ml_location = log_plus_c(review_iso_english$m_location)
review_iso_english$ml_money = log_plus_c(review_iso_english$m_money)
metrics_by_contry = review_iso_english[, .(n=length(id),
m_length = mean(ml_length),
m_neg=mean(ml_neg),
m_pos=mean(ml_pos),
m_house=mean(ml_house),
m_social=mean(ml_social),
m_self=mean(ml_self),
m_altruistic=mean(ml_altruistic),
m_location=mean(ml_location),
m_money=mean(ml_money)), by=Code3]
setkey(countries, Code3)
setkey(metrics_by_contry, Code3)
metrics_by_contry = metrics_by_contry[countries, nomatch=0]
names(metrics_by_contry)
varx = c("m_length", "m_neg", "m_pos", "m_house", "m_social", "m_self", "m_altruistic",
"m_location", "m_money")
vary = c("power_distance", "individualism", "overall_pace_means", "GDP_per_capita_in_dollars")
metrics_by_contry$overall_pace_means = as.numeric(metrics_by_contry$overall_pace_means)
library(psych)
corr.test(metrics_by_contry[, varx, with=F], metrics_by_contry[, vary, with=F], method="pearson", adjust="fdr")
View(countries)
setkey(review_iso_english, Code3)
setkey(countries, Code3)
review_iso_english_m = review_iso_english[countries, nomatch=0]
varx = c("ml_length", "ml_neg", "ml_pos", "ml_house", "ml_social", "ml_self", "ml_altruistic",
"ml_location", "ml_money")
vary = c("power_distance", "individualism", "overall_pace_means", "GDP_per_capita_in_dollars")
corr.test(review_iso_english_m[, varx, with=F], review_iso_english_m[, vary, with=F], method="pearson", adjust="fdr")
review_iso_english_m$overall_pace_means =  as.numeric(review_iso_english_m$overall_pace_means)
corr.test(review_iso_english_m[, varx, with=F], review_iso_english_m[, vary, with=F], method="pearson", adjust="fdr")
ggplot(metrics_by_contry, aes(x=m_house, y=GDP_per_capita_in_dollars, label=Code3)) + geom_label()
ggplot(metrics_by_contry, aes(x=GDP_per_capita_in_dollars, y=m_house, label=Code3)) + geom_label()
ggplot(metrics_by_contry, aes(x=overall_pace_means, y=m_house, label=Code3)) + geom_label()
ggplot(metrics_by_contry, aes(x=individualism, y=m_neg, label=Code3)) + geom_label()
ggplot(metrics_by_contry, aes(x=individualism, y=m_neg, label=Code3)) + geom_label() + geom_smooth()
ggplot(metrics_by_contry, aes(x=individualism, y=m_neg, label=Code3)) + geom_smooth(method = "lm") +geom_label()
ggplot(metrics_by_contry, aes(x=individualism, y=m_location, label=Code3)) + geom_smooth(method = "lm") +geom_label()
review_iso[Code3='USA']$comments[1:100]
review_iso[Code3=='USA']$comments[1:100]
review_iso[Code3=='IDN']$comments[1:100]
by_comments = review_iso[, .(n=length(id), by=comments)]
View(by_comments)
View(review_iso)
by_comments = review_iso[, .(n=length(idReview), by=comments)]
View(by_comments)
by_comments = review_iso[, .(n=length(unique(idReview)), by=comments)]
View(by_comments)
by_comments = as.data.table(
sqldf("select comments, count(*)
from review_io
group by comments")
)
by_comments = as.data.table(
sqldf("select comments, count(*)
from review_iso
group by comments")
)
View(by_comments)
by_comments = as.data.table(
sqldf("select comments, count(*) n
from review_iso
group by comments")
)
by_comments = as.data.table(
sqldf("select comments, count(*) freq_comment
from review_iso
group by comments")
)
review_iso_english = review_iso_english[comments %in% by_comments[freq_comment>=10]$comments]
setorder(by_comments, -freq_comment)
by_comments$cumulat = cumsum(freq_comment)
by_comments = as.data.table(
sqldf("select comments, count(*) freq_comment
from review_iso
group by comments")
)
setorder(by_comments, -freq_comment)
by_comments$cumulat = cumsum(freq_comment)
by_comments$cumulat = cumsum(by_comments$freq_comment)
View(by_comments)
by_comments$ratio = by_comments$cumulat/max(by_comments$cumulat)
View(by_comments)
library(quanteda)
mfdict <- dictionary(file = "LIWC2007_English080730.dic", format = "LIWC")
doc_term_matrix <- dfm(review_iso_english$comments, stem = FALSE, dictionary = mfdict)
# doc_term_matrixN = doc_term_matrix/review$nwords
doc_term = data.table( data.frame(doc_term_matrix) )
detach(package:quanteda)
review_iso_english = cbind(review_iso_english, doc_term)
remove(doc_term)
library(stringr)
review_iso_english$nwords = str_count(review_iso_english$comments, '\\w+')
detach(package:stringr)
review_iso_english$m_length = review_iso_english$nwords
review_iso_english$m_neg = review_iso_english$negemo / review_iso_english$nwords
review_iso_english$m_pos = review_iso_english$posemo / review_iso_english$nwords
review_iso_english$m_house = review_iso_english$home / review_iso_english$nwords
review_iso_english$m_social = review_iso_english$social / review_iso_english$nwords
review_iso_english$m_self = (review_iso_english$i+review_iso_english$ipron) / review_iso_english$nwords
review_iso_english$m_altruistic = (review_iso_english$we+review_iso_english$you+review_iso_english$shehe+review_iso_english$they) / review_iso_english$nwords
review_iso_english$m_location = review_iso_english$space / review_iso_english$nwords
review_iso_english$m_money = review_iso_english$money / review_iso_english$nwords
View(by_comments)
summary(review_iso_english$m_length)
View(by_comments)
View(by_comments)
View(by_comments)
substring("The host canceled this reservation the day before", 1, 12)
substring("The host canceled this reservation the day before", 1, 20)
substring("The host canceled this reservation the day before", 1, 25)
substring("The host canceled this reservation the day before", 1, 30)
substring("The host canceled this reservation the day before", 1, 33)
substring("The host canceled this reservation the day before", 1, 34)
library(quanteda)
mfdict <- dictionary(file = "LIWC2007_English080730.dic", format = "LIWC")
doc_term_matrix <- dfm(review_iso_english$comments, stem = FALSE, dictionary = mfdict)
# doc_term_matrixN = doc_term_matrix/review$nwords
doc_term = data.table( data.frame(doc_term_matrix) )
detach(package:quanteda)
review_iso_english = cbind(review_iso_english, doc_term)
remove(doc_term)
library(stringr)
review_iso_english$nwords = str_count(review_iso_english$comments, '\\w+')
detach(package:stringr)
# Metrics
#   length = #words (length of a review)
#   neg = #neg/#words (negative sentiment)
#   pos = #pos/#words (positive sentiment)
#   house = #house/#words (house focused)
#   social = #social/#words (social focused)
#   self = #(i,me,my,myself)/#words (self focused)
#   altruistic = #(we,our,us,ourselves,she,he,his,her,they,their)/#words (focused on others)
#   location = #(location,access,close by,to,distance,convenient,functional)/#words (focus on location and accessibility)
#   money = #money/#words (focus on money and value)
review_iso_english$m_length = review_iso_english$nwords
review_iso_english$m_neg = review_iso_english$negemo / review_iso_english$nwords
review_iso_english$m_pos = review_iso_english$posemo / review_iso_english$nwords
review_iso_english$m_house = review_iso_english$home / review_iso_english$nwords
review_iso_english$m_social = review_iso_english$social / review_iso_english$nwords
review_iso_english$m_self = (review_iso_english$i+review_iso_english$ipron) / review_iso_english$nwords
review_iso_english$m_altruistic = (review_iso_english$we+review_iso_english$you+review_iso_english$shehe+review_iso_english$they) / review_iso_english$nwords
review_iso_english$m_location = review_iso_english$space / review_iso_english$nwords
review_iso_english$m_money = review_iso_english$money / review_iso_english$nwords
review_iso_english = review_iso[Code3 %in% countries_en$Code3 & isEnglish==1]
library(quanteda)
mfdict <- dictionary(file = "LIWC2007_English080730.dic", format = "LIWC")
doc_term_matrix <- dfm(review_iso_english$comments, stem = FALSE, dictionary = mfdict)
# doc_term_matrixN = doc_term_matrix/review$nwords
doc_term = data.table( data.frame(doc_term_matrix) )
detach(package:quanteda)
review_iso_english = cbind(review_iso_english, doc_term)
remove(doc_term)
library(stringr)
review_iso_english$nwords = str_count(review_iso_english$comments, '\\w+')
detach(package:stringr)
# Metrics
#   length = #words (length of a review)
#   neg = #neg/#words (negative sentiment)
#   pos = #pos/#words (positive sentiment)
#   house = #house/#words (house focused)
#   social = #social/#words (social focused)
#   self = #(i,me,my,myself)/#words (self focused)
#   altruistic = #(we,our,us,ourselves,she,he,his,her,they,their)/#words (focused on others)
#   location = #(location,access,close by,to,distance,convenient,functional)/#words (focus on location and accessibility)
#   money = #money/#words (focus on money and value)
review_iso_english$m_length = review_iso_english$nwords
review_iso_english$m_neg = review_iso_english$negemo / review_iso_english$nwords
review_iso_english$m_pos = review_iso_english$posemo / review_iso_english$nwords
review_iso_english$m_house = review_iso_english$home / review_iso_english$nwords
review_iso_english$m_social = review_iso_english$social / review_iso_english$nwords
review_iso_english$m_self = (review_iso_english$i+review_iso_english$ipron) / review_iso_english$nwords
review_iso_english$m_altruistic = (review_iso_english$we+review_iso_english$you+review_iso_english$shehe+review_iso_english$they) / review_iso_english$nwords
review_iso_english$m_location = review_iso_english$space / review_iso_english$nwords
review_iso_english$m_money = review_iso_english$money / review_iso_english$nwords
review_iso_english = review_iso_english[ substr(comments, 1, 34) != "The host canceled this reservation" ]
review_iso_english2 = as.data.table(
sqldf("select *
from review_iso_english
where comments not like 'The host canceled this reservation%' ")
)
review_iso_english = as.data.table(
sqldf("select *
from review_iso_english
where comments not like 'The host canceled this reservation%' ")
)
review_iso_english = as.data.table(
sqldf("select *
from review_iso_english
where comments not like 'The guest canceled this reservation%' ")
)
review_iso_english = as.data.table(
sqldf("select *
from review_iso_english
where comments not like 'The reservation was canceled%' ")
)
summary(review_iso_english$m_length)
review_iso_english[m_length>1000]$comments[1]
review_iso_english$m_length_dec = cut(review_iso_english$m_length, quantile(review_iso_english$m_length,(0:10)/10),include.lowest=TRUE))
hist( (review_iso_english$m_length ))
log_plus_c = function(x)
{
y = setdiff(x, 0)
miny = min(y)
x_tranf = log10(x+miny)
return(x_tranf)
}
review_iso_english$ml_length = log_plus_c(review_iso_english$m_length)
review_iso_english$ml_neg = log_plus_c(review_iso_english$m_neg)
review_iso_english$ml_pos = log_plus_c(review_iso_english$m_pos)
review_iso_english$ml_house = log_plus_c(review_iso_english$m_house)
review_iso_english$ml_social = log_plus_c(review_iso_english$m_social)
review_iso_english$ml_self = log_plus_c(review_iso_english$m_self)
review_iso_english$ml_altruistic = log_plus_c(review_iso_english$m_altruistic)
review_iso_english$ml_location = log_plus_c(review_iso_english$m_location)
review_iso_english$ml_money = log_plus_c(review_iso_english$m_money)
review_iso_english_long = review_iso_english[m_length>5]
View(review_iso_english_long)
metrics_by_contry = review_iso_english_long[, .(n=length(id),
m_length = mean(ml_length),
m_neg=mean(ml_neg),
m_pos=mean(ml_pos),
m_house=mean(ml_house),
m_social=mean(ml_social),
m_self=mean(ml_self),
m_altruistic=mean(ml_altruistic),
m_location=mean(ml_location),
m_money=mean(ml_money)), by=Code3]
setkey(countries, Code3)
setkey(metrics_by_contry, Code3)
metrics_by_contry = metrics_by_contry[countries, nomatch=0]
names(metrics_by_contry)
varx = c("m_length", "m_neg", "m_pos", "m_house", "m_social", "m_self", "m_altruistic",
"m_location", "m_money")
vary = c("power_distance", "individualism", "overall_pace_means", "GDP_per_capita_in_dollars")
metrics_by_contry$overall_pace_means = as.numeric(metrics_by_contry$overall_pace_means)
library(psych)
corr.test(metrics_by_contry[, varx, with=F], metrics_by_contry[, vary, with=F], method="pearson", adjust="fdr")
ggplot(metrics_by_contry, aes(x=GDP_per_capita_in_dollars, y=m_house, label=Code3)) + geom_label()
ggplot(review_iso_english, aes(x=m_house)) + geom_histogram()
ggplot(review_iso_english, aes(x=ml_house)) + geom_histogram()
ggplot(review_iso_english[Code3=='USA'], aes(x=ml_house)) + geom_histogram()
ggplot(review_iso_english[Code3=='IND'], aes(x=ml_house)) + geom_histogram()
ggplot(review_iso_english, aes(x=ml_house)) + geom_histogram() + facet_grid(.~Code3)
ggplot(review_iso_english, aes(x=ml_house)) + geom_histogram() + facet_grid(Code3~.)
ggplot(review_iso_english[Code3=='USA' | Code3=='IND'], aes(x=ml_house)) + geom_histogram() + facet_grid(Code3~.)
ggplot(review_iso_english, aes(x=ml_house)) + geom_histogram() + facet_grid(Code3~.)
ggplot(review_iso_english[Code3=='USA'], aes(x=ml_house)) + geom_histogram()
ggplot(review_iso_english[Code3=='IND'], aes(x=ml_house)) + geom_histogram()
ggplot(review_iso_english[Code3=='USA'], aes(x=ml_house)) + geom_histogram() + xlim(-3,0)
ggplot(review_iso_english[Code3=='IND'], aes(x=ml_house)) + geom_histogram() + xlim(-3,0)
ggplot(metrics_by_contry, aes(x=GDP_per_capita_in_dollars, y=m_house, label=Code3)) + geom_label()
ggplot(metrics_by_contry, aes(x=individualism, y=m_neg, label=Code3)) + geom_smooth(method = "lm") +geom_label()
ggplot(metrics_by_contry, aes(x=individualism, y=m_location, label=Code3)) + geom_smooth(method = "lm") +geom_label()
ggplot(review_iso_english[Code3=='USA'], aes(x=m_house)) + geom_histogram()
ggplot(review_iso_english[Code3=='IND'], aes(x=m_house)) + geom_histogram()
ggplot(review_iso_english[Code3=='USA'], aes(x=m_house)) + geom_histogram() + xlim(0,0.5)
ggplot(review_iso_english[Code3=='IND'], aes(x=m_house)) + geom_histogram() + xlim(0,0.5)
ggplot(metrics_by_contry, aes(x=GDP_per_capita_in_dollars, y=m_house, label=Code3)) + geom_label()
ggplot(metrics_by_contry, aes(x=individualism, y=m_neg, label=Code3)) + geom_smooth(method = "lm") +geom_label()
ggplot(metrics_by_contry, aes(x=individualism, y=m_location, label=Code3)) + geom_smooth(method = "lm") +geom_label()
ggplot(review_iso_english[Code3=='USA'], aes(x=m_house)) + geom_histogram() + xlim(0,0.5)
ggplot(review_iso_english[Code3=='IND'], aes(x=m_house)) + geom_histogram() + xlim(0,0.5)
ggplot(review_iso_english_m, aes(ml_pos, ml_neg) + geom_point()
)
ggplot(review_iso_english_m, aes(ml_pos, ml_neg)) + geom_point()
ggplot(review_iso_english_m, aes(ml_pos, ml_neg)) + geom_point(size=.1, alpha=.1)
ggplot(review_iso_english_m, aes(ml_pos, ml_neg)) + geom_smooth(method = "lm") + geom_point(size=.1, alpha=.1)
ggplot(review_iso_english_m, aes(m_pos, m_neg)) + geom_smooth(method = "lm") + geom_point(size=.1, alpha=.1)
source("myFunctions.R")
library(RMySQL)
mydb = dbConnect(MySQL(), user='root', password='', dbname='airbnb', host='127.0.0.1')
dbListTables(mydb)
guest = load_from_db(mydb, "guest")
guestSeen = load_from_db(mydb, "guestSeen")
host = load_from_db(mydb, "host")
isocode = load_from_db(mydb, "isocode")
listing = load_from_db(mydb, "listing")
locale = load_from_db(mydb, "locale")
review = load_from_db(mydb, "review")
review_language = load_from_db(mydb, "review_language")
word_count = load_from_db(mydb, "word_count")
world_cultural_factors = load_from_db(mydb, "world_cultural_factors")
detach(package:RMySQL)
setkey(review, idReview)
setkey(review_language, idReview)
review = review[review_language, nomatch=0]
remove(review_language)
View(review)
textcat("ciao ciao")
textcat("ciao ciao come stai")
textcat("It is a nice place.")
textcat("It is a nice place")
textcat("It is a nice place.")
textcat("It is a nice place.", method = "CT")
textcat("It is a nice place.", method = ""ranks":")
textcat("It is a nice place.", method = "ranks")
x = review$comments[1:300]
dt = data.table(comments = review$comments[1:300])
dt = data.table(comments = review$comments[1:300])
dt$language_CT = textcat(dt$comments, method = "CT")
dt$language_ranks = textcat(dt$comments, method = "ranks")
textcat("It is a nice place.", method = "ranks")
dt = data.table(comments = review$comments[1:300])
dt$language_CT = textcat(dt$comments, method = "CT")
dt$language_ranks = textcat(dt$comments, method = "ranks")
dt$language_ALPD = textcat(dt$comments, method = "ALPD")
dt$language_KLI = textcat(dt$comments, method = "KLI")
dt$language_KLJ = textcat(dt$comments, method = "KLJ")
dt$language_JS = textcat(dt$comments, method = "JS")
dt$language_cosine = textcat(dt$comments, method = "cosine")
dt$language_Dice = textcat(dt$comments, method = "Dice")
View(dt)
